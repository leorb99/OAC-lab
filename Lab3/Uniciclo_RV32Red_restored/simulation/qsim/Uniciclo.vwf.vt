// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2023 13:44:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Uniciclo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Uniciclo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clock2;
reg [4:0] regin;
reg reset;
// wires                                               
wire [31:0] Instr;
wire [31:0] PC;
wire [31:0] regout;
wire [31:0] regs0;
wire [31:0] regs1;
wire [31:0] regt0;
wire [31:0] regt2;

// assign statements (if any)                          
Uniciclo i1 (
// port map - connection between master ports and signals/registers   
	.Instr(Instr),
	.PC(PC),
	.clock(clock),
	.clock2(clock2),
	.regin(regin),
	.regout(regout),
	.regs0(regs0),
	.regs1(regs1),
	.regt0(regt0),
	.regt2(regt2),
	.reset(reset)
);
initial 
begin 
#20000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// clock2
always
begin
	clock2 = 1'b0;
	clock2 = #10000 1'b1;
	#10000;
end 
// regin[ 4 ]
initial
begin
	regin[4] = 1'b0;
end 
// regin[ 3 ]
initial
begin
	regin[3] = 1'b0;
end 
// regin[ 2 ]
initial
begin
	regin[2] = 1'b0;
end 
// regin[ 1 ]
initial
begin
	regin[1] = 1'b0;
end 
// regin[ 0 ]
initial
begin
	regin[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #320000 1'b1;
	reset = #1920000 1'b0;
end 
endmodule

