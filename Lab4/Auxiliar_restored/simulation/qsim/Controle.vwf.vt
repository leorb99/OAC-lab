// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/07/2023 13:49:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iCLK;
reg [6:0] iOpCode;
reg iRST;
// wires                                               
wire [1:0] oALUOp;
wire oEscreveIR;
wire oEscreveMem;
wire oEscrevePC;
wire oEscrevePCB;
wire oEscrevePCCond;
wire oEscreveReg;
wire oIouD;
wire oLeMem;
wire [1:0] oMem2Reg;
wire [1:0] oOrigAULA;
wire [1:0] oOrigBULA;
wire oOrigPC;

// assign statements (if any)                          
Controle i1 (
// port map - connection between master ports and signals/registers   
	.iCLK(iCLK),
	.iOpCode(iOpCode),
	.iRST(iRST),
	.oALUOp(oALUOp),
	.oEscreveIR(oEscreveIR),
	.oEscreveMem(oEscreveMem),
	.oEscrevePC(oEscrevePC),
	.oEscrevePCB(oEscrevePCB),
	.oEscrevePCCond(oEscrevePCCond),
	.oEscreveReg(oEscreveReg),
	.oIouD(oIouD),
	.oLeMem(oLeMem),
	.oMem2Reg(oMem2Reg),
	.oOrigAULA(oOrigAULA),
	.oOrigBULA(oOrigBULA),
	.oOrigPC(oOrigPC)
);
initial 
begin 
#1000000 $finish;
end 

// iCLK
always
begin
	iCLK = 1'b0;
	iCLK = #20000 1'b1;
	#20000;
end 
// iOpCode[ 6 ]
initial
begin
	iOpCode[6] = 1'b0;
end 
// iOpCode[ 5 ]
initial
begin
	iOpCode[5] = 1'b0;
end 
// iOpCode[ 4 ]
initial
begin
	iOpCode[4] = 1'b0;
end 
// iOpCode[ 3 ]
initial
begin
	iOpCode[3] = 1'b0;
end 
// iOpCode[ 2 ]
initial
begin
	iOpCode[2] = 1'b0;
end 
// iOpCode[ 1 ]
initial
begin
	iOpCode[1] = 1'b0;
	iOpCode[1] = #30000 1'b1;
	iOpCode[1] = #90000 1'b0;
end 
// iOpCode[ 0 ]
initial
begin
	iOpCode[0] = 1'b0;
	iOpCode[0] = #30000 1'b1;
	iOpCode[0] = #90000 1'b0;
end 

// iRST
initial
begin
	iRST = 1'b0;
end 
endmodule

